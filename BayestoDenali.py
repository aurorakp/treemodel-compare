'''
Created on Jun 11, 2015

@author: alkpongsema

'''

import os
from BayesExtract import BayesExtract
from GeoFeed import GeoFeed
from subprocess import call


class BayestoDenali(object):
    '''
    This program takes the results from a Mr. Bayes run and turns them into a contour tree for 
    use in Denali by calculating the k-nearest neighbors using a distance matrix
    generated by the GTP jar.
    '''


    def __init__(self, treeName, gtp_path=os.getcwd(), denalidir="c:\\denali\\"):
        '''
        Constructor
        '''
        self.treeName = treeName
        #self.bayes_dir = bayesdir
        #self.bayes_fname = bayesdir + treeName + ".nex"
        self.denalidir = denalidir
        self.gtp_path = gtp_path
        
    
    def converttoDenali(self, treeNum=50, k_neighbors=5):
    
        os.chdir(self.gtp_path)
        
        # Pull information from the Bayes results files:
        if not os.path.exists(self.gtp_path + self.treeName + "treeout.txt"):
            treeExtract = BayesExtract(self.treeName, self.gtp_path+ self.treeName + ".nex", self.gtp_path, treeNum)
            treeExtract.treeMatch()
            treeout = treeExtract.treeout
        else:
            treeout = self.gtp_path + self.treeName + "treeout.txt"
        # Find the distance matrix and the k nearest neighbors of each tree in the treespace:
        distance_file = self.treeName + "_distance.txt"
        treeGeo = GeoFeed(treeout, distance_file)
        treeGeo.geoConvert()
        treeGeo.get_diss_matrix("output.txt", distance_file,"symmetric")
        treeGeo.nearestNeighbors(self.treeName, treeNum, k_neighbors)
        
        # Put together the information in Denali formatted edge and vertex files:
        
        treeGeo.graph_from_NN(self.treeName, treeNum)
    
    def create_contour_tree(self, treeNum=50, k_neighbors=5):
        
        # Set up filenames for ctree:
        
        vert_file = self.gtp_path + "\\" + self.treeName + "_vertices.txt"
        #print "vert_filename is: " + vert_file 
        edge_file = self.gtp_path + "\\" + self.treeName + "_edges.txt"
        #print "edge_filename is: " + edge_file
        tree_file = self.gtp_path + "\\" + self.treeName + str(treeNum) + "t" + str(k_neighbors) + "n" + ".tree"
        #print "tree_filename is: " + tree_file 
        
        # Run ctree to create the contour tree for Denali
        
        command = self.denalidir + "\\ctree.exe" + " " + vert_file + " " + edge_file + " " + tree_file
        call(command.split())
    
    
    #ctree_path = "c:\\denali\\"
    #command = ctree_path + "ctree.exe" + " " + gtp_path + "vert.txt " + gtp_path + "edges.txt" + " " + gtp_path + bayes_file + ".tree"
    
    '''
    yeast = BayesExtract("All_genes_charsets_nt8.nex",10)
    yeast.treeMatch()
    yeastGeo = GeoFeed("c:\MrBayes\All_genes_charsets_nt8.txt","yeast_matrix.txt")
    yeastGeo.geoConvert()
    yeastGeo.get_diss_matrix("output.txt", "yeast_matrix.txt", "symmetric")
    yeastGeo.nearestNeighbors(10,4)
    yeastDen = DenaliFormat("yeastout.txt","yeastNeighbors.txt","yeastDen.txt")
    yeastDen.create_edges()
    yeastDen.create_vertices()
    '''